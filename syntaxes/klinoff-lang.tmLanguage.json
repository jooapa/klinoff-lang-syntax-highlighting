{
  "scopeName": "source.kln",
  "fileTypes": ["kln", "nöff"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.kln",
          "match": "//.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\b(nöff|nöf|oink|niff|nilf|slingshot|pig|gip|modify|add|sub|multiply|divide|modulo|power|input|nöffnöff|snort|pork|pop|infinite|rnd)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.kln",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*(?<!§)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.kln",
          "match": "[+\\-*/%^]"
        },
        {
          "name": "keyword.operator.comparison.kln",
          "match": "==|!=|>|<|>=|<="
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.kln",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "captures": {
            "0": {
              "name": "entity.name.function.kln"
            }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.kln",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.kln",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "variable.other.kln",
              "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*(?<!§)"
            },
            {
              "name": "string.quoted.double.kln.escape",
              "match": "\\$"
            }
          ],
          "captures": {
            "0": {
              "name": "string.quoted.double.kln"
            },
            "1": {
              "name": "variable.other.kln"
            },
            "2": {
              "name": "string.quoted.double.kln.escape"
            }
          }
        }
      ]
    },
    "control-flow": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\b(niff|nilf)\\b"
        }
      ]
    },
    "loops": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\b(snort|pork|pop)\\b"
        }
      ]
    },
    "input": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\binput\\b"
        }
      ]
    },
    "data-types": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\bstring\\b"
        }
      ]
    },
    "secret-functions": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\bnöffnöff\\b"
        }
      ]
    },
    "all-keywords": {
      "patterns": [
        {
          "name": "keyword.control.kln",
          "match": "\\b(==|!=|>|<|>=|<=|nöff|nöf|oink|niff|nilf|snort|pork|pop|slingshot|pig|gip|modify|add|sub|multiply|divide|modulo|power|infinite|input|nöffnöff|rnd)\\b",
          "captures": {
            "0": {
              "name": "keyword.control.kln"
            },
            "1": {
              "include": "#strings"
            }
          }
        }
      ]
    }
  }
}
